

*****************************************************************************

void Debug (char *str);

Prints a debug string to the screen

*****************************************************************************

int Spawn (spawnargs_t args, void **segments, int segment_cnt);

Creates a new process,  Only callable by the Filesys process.
Returns handle to new process.


*****************************************************************************

void Exit (int status);

*****************************************************************************

int Join (int pid);




*****************************************************************************

int CloseHandle (int handle);

*****************************************************************************

int WaitFor (int handle);

*****************************************************************************

int CheckFor (int handle);

*****************************************************************************

int SetSchedParams (int policy, int priority);

*****************************************************************************

void Yield (void);

*****************************************************************************

int AddInterruptHandler (int irq);

*****************************************************************************

int MaskInterrupt (int irq);

*****************************************************************************

int UnmaskInterrupt (int irq);

*****************************************************************************

int CreateTimer (void);

*****************************************************************************

int SetTimer (int handle, int type, struct TimeVal *tv);

*****************************************************************************

int GetSystemTime (struct TimeVal *tv);

*****************************************************************************

int SystemInfo (sysinfo_t *si);


*****************************************************************************

int ProcessInfo (procinfo_t *pi);


*****************************************************************************

void *VirtualAlloc (void *addr, ssize_t size, bits32_t flags);

*****************************************************************************

void *VirtualAllocPhys (void *addr, ssize_t size, bits32_t flags, void *phys_addr);

*****************************************************************************

int VirtualFree (void *addr);

*****************************************************************************

int VirtualProtect (void *addr, bits32_t flags);

*****************************************************************************

ssize_t VirtualSizeOf (void *addr);

*****************************************************************************

int WireMem (void *addr);

*****************************************************************************

int UnwireMem (void *addr);

*****************************************************************************

vm_addr GetCachedSegment (uint64 *in_segment_id)

*****************************************************************************

int PutCachedSegment (vm_addr addr, bits32_t flags, uint64 *out_segment_id)

*****************************************************************************

int ExpungeCachedSegment (uint64 *in_segment_id)

*****************************************************************************

int PutMsg (int handle, void *msg, bits32_t flags);

*****************************************************************************

ssize_t GetMsg (int handle, void **msg);

*****************************************************************************

int PutHandle (int port_handle, int send_handle, bits32_t flags);

*****************************************************************************

int GetHandle (int port_handle, void **rcv_handle);

*****************************************************************************

int CreateChannel (int handle[2]);

*****************************************************************************

int IsAChannel (int handle1, int handle2);








